'\" et
.TH NEXTAFTER "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
nextafter,
nextafterf,
nextafterl,
nexttoward,
nexttowardf,
nexttowardl
\(em next representable floating-point number
.SH SYNOPSIS
.LP
.nf
#include <math.h>
.P
double nextafter(double \fIx\fP, double \fIy\fP);
float nextafterf(float \fIx\fP, float \fIy\fP);
long double nextafterl(long double \fIx\fP, long double \fIy\fP);
double nexttoward(double \fIx\fP, long double \fIy\fP);
float nexttowardf(float \fIx\fP, long double \fIy\fP);
long double nexttowardl(long double \fIx\fP, long double \fIy\fP);
.fi
.SH DESCRIPTION
The functionality described on this reference page is aligned with the
ISO\ C standard. Any conflict between the requirements described here and the
ISO\ C standard is unintentional. This volume of POSIX.1\(hy2008 defers to the ISO\ C standard.
.P
The
\fInextafter\fR(),
\fInextafterf\fR(),
and
\fInextafterl\fR()
functions shall compute the next representable floating-point value
following
.IR x
in the direction of
.IR y .
Thus, if
.IR y
is less than
.IR x ,
\fInextafter\fR()
shall return the largest representable floating-point number less than
.IR x .
The
\fInextafter\fR(),
\fInextafterf\fR(),
and
\fInextafterl\fR()
functions shall return
.IR y
if
.IR x
equals
.IR y .
.P
The
\fInexttoward\fR(),
\fInexttowardf\fR(),
and
\fInexttowardl\fR()
functions shall be equivalent to the corresponding
\fInextafter\fR()
functions, except that the second parameter shall have type
.BR "long double"
and the functions shall return
.IR y
converted to the type of the function if
.IR x
equals
.IR y .
.P
An application wishing to check for error situations should set
.IR errno
to zero and call
.IR feclearexcept (FE_ALL_EXCEPT)
before calling these functions. On return, if
.IR errno
is non-zero or \fIfetestexcept\fR(FE_INVALID | FE_DIVBYZERO |
FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.
.SH "RETURN VALUE"
Upon successful completion, these functions shall return the next
representable floating-point value following
.IR x
in the direction of
.IR y .
.P
If
.IR x ==\c
.IR y ,
.IR y
(of the type
.IR x )
shall be returned.
.P
If
.IR x
is finite and the correct function value would overflow, a range error
shall occur and \(+-HUGE_VAL, \(+-HUGE_VALF, and \(+-HUGE_VALL (with
the same sign as
.IR x )
shall be returned as appropriate for the return type of the function.
.P
If
.IR x
or
.IR y
is NaN, a NaN shall be returned.
.P
If
.IR x !=\c
.IR y
and the correct function value is subnormal, zero, or underflows,
a range error shall occur, and
.br
the correct function value (if representable) or
.br
0.0 shall be returned.
.SH ERRORS
These functions shall fail if:
.IP "Range\ Error" 12
The correct value overflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the overflow floating-point exception shall be raised.
.RE
.IP "Range\ Error" 12
The correct value is subnormal or underflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the underflow floating-point exception shall be raised.
.RE
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
On error, the expressions (\fImath_errhandling\fR & MATH_ERRNO) and
(\fImath_errhandling\fR & MATH_ERREXCEPT) are independent of each
other, but at least one of them must be non-zero.
.P
When
.IR <tgmath.h> 
is included, note that the return type of
\fInextafter\fR()
depends on the generic typing deduced from both arguments, while the
return type of
\fInexttoward\fR()
depends only on the generic typing of the first argument.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIfeclearexcept\fR\^(\|)",
.IR "\fIfetestexcept\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 4.19" ", " "Treatment of Error Conditions for Mathematical Functions",
.IR "\fB<math.h>\fP",
.IR "\fB<tgmath.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
