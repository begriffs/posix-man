'\" et
.TH PTHREAD_RWLOCK_RDLOCK "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
pthread_rwlock_rdlock,
pthread_rwlock_tryrdlock
\(em lock a read-write lock object for reading
.SH SYNOPSIS
.LP
.nf
#include <pthread.h>
.P
int pthread_rwlock_rdlock(pthread_rwlock_t *\fIrwlock\fP);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *\fIrwlock\fP);
.fi
.SH DESCRIPTION
The
\fIpthread_rwlock_rdlock\fR()
function shall apply a read lock to the read-write lock referenced by
.IR rwlock .
The calling thread acquires the read lock if a writer does not hold the
lock and there are no writers blocked on the lock.
.P
If the Thread Execution Scheduling option is supported, and the threads
involved in the lock are executing with the scheduling policies
SCHED_FIFO or SCHED_RR, the calling thread shall
not acquire the lock if a writer holds the lock or if writers of higher
or equal priority are blocked on the lock; otherwise, the calling
thread shall acquire the lock.
.P
If the Thread Execution Scheduling option is supported, and the
threads involved in the lock are executing with the SCHED_SPORADIC
scheduling policy, the calling thread shall not acquire the lock if a
writer holds the lock or if writers of higher or equal priority are
blocked on the lock; otherwise, the calling thread shall acquire the
lock.
.P
If the Thread Execution Scheduling option is not supported, it is
implementation-defined whether the calling thread acquires the lock
when a writer does not hold the lock and there are writers blocked on
the lock. If a writer holds the lock, the calling thread shall not
acquire the read lock. If the read lock is not acquired, the calling
thread shall block until it can acquire the lock. The calling thread
may deadlock if at the time the call is made it holds a write lock.
.P
A thread may hold multiple concurrent read locks on
.IR rwlock
(that is, successfully call the
\fIpthread_rwlock_rdlock\fR()
function
.IR n
times). If so, the application shall ensure that the thread performs
matching unlocks (that is, it calls the
\fIpthread_rwlock_unlock\fR()
function
.IR n
times).
.P
The maximum number of simultaneous read locks that an implementation
guarantees can be applied to a read-write lock shall be
implementation-defined. The
\fIpthread_rwlock_rdlock\fR()
function may fail if this maximum would be exceeded.
.P
The
\fIpthread_rwlock_tryrdlock\fR()
function shall apply a read lock as in the
\fIpthread_rwlock_rdlock\fR()
function, with the exception that the function shall fail if the
equivalent
\fIpthread_rwlock_rdlock\fR()
call would have blocked the calling thread. In no case shall the
\fIpthread_rwlock_tryrdlock\fR()
function ever block; it always either acquires the lock or fails and
returns immediately.
.P
Results are undefined if any of these functions are called with an
uninitialized read-write lock.
.P
If a signal is delivered to a thread waiting for a read-write lock for
reading, upon return from the signal handler the thread resumes waiting
for the read-write lock for reading as if it was not interrupted.
.SH "RETURN VALUE"
If successful, the
\fIpthread_rwlock_rdlock\fR()
function shall return zero; otherwise, an error number shall be
returned to indicate the error.
.P
The
\fIpthread_rwlock_tryrdlock\fR()
function shall return zero if the lock for reading on the read-write
lock object referenced by
.IR rwlock
is acquired. Otherwise, an error number shall be returned to indicate
the error.
.SH ERRORS
The
\fIpthread_rwlock_tryrdlock\fR()
function shall fail if:
.TP
.BR EBUSY
The read-write lock could not be acquired for reading because a writer
holds the lock or a writer with the appropriate priority was blocked on it.
.P
The
\fIpthread_rwlock_rdlock\fR()
and
\fIpthread_rwlock_tryrdlock\fR()
functions may fail if:
.TP
.BR EAGAIN
The read lock could not be acquired because the maximum number of read
locks for
.IR rwlock
has been exceeded.
.P
The
\fIpthread_rwlock_rdlock\fR()
function may fail if:
.TP
.BR EDEADLK
A deadlock condition was detected or the current thread already owns
the read-write lock for writing.
.P
These functions shall not return an error code of
.BR [EINTR] .
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
Applications using these functions may be subject to priority inversion,
as discussed in the Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.287" ", " "Priority Inversion".
.SH RATIONALE
If an implementation detects that the value specified by the
.IR rwlock
argument to
\fIpthread_rwlock_rdlock\fR()
or
\fIpthread_rwlock_tryrdlock\fR()
does not refer to an initialized read-write lock object, it is
recommended that the function should fail and report an
.BR [EINVAL] 
error.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.ad l
.IR "\fIpthread_rwlock_destroy\fR\^(\|)",
.IR "\fIpthread_rwlock_timedrdlock\fR\^(\|)",
.IR "\fIpthread_rwlock_timedwrlock\fR\^(\|)",
.IR "\fIpthread_rwlock_trywrlock\fR\^(\|)",
.IR "\fIpthread_rwlock_unlock\fR\^(\|)"
.ad b
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 3.287" ", " "Priority Inversion",
.IR "Section 4.11" ", " "Memory Synchronization",
.IR "\fB<pthread.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
