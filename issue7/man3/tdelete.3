'\" et
.TH TDELETE "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
tdelete,
tfind,
tsearch,
twalk
\(em manage a binary search tree
.SH SYNOPSIS
.LP
.nf
#include <search.h>
.P
void *tdelete(const void *restrict \fIkey\fP, void **restrict \fIrootp\fP,
    int(*\fIcompar\fP)(const void *, const void *));
void *tfind(const void *\fIkey\fP, void *const *\fIrootp\fP,
    int(*\fIcompar\fP)(const void *, const void *));
void *tsearch(const void *\fIkey\fP, void **\fIrootp\fP,
    int (*\fIcompar\fP)(const void *, const void *));
void twalk(const void *\fIroot\fP,
    void (*\fIaction\fP)(const void *, VISIT, int));
.fi
.SH DESCRIPTION
The
\fItdelete\fR(),
\fItfind\fR(),
\fItsearch\fR(),
and
\fItwalk\fR()
functions manipulate binary search trees. Comparisons are made with a
user-supplied routine, the address of which is passed as the
.IR compar
argument. This routine is called with two arguments, which are the
pointers to the elements being compared. The application shall ensure
that the user-supplied routine returns an integer less than, equal to,
or greater than 0, according to whether the first argument is to be
considered less than, equal to, or greater than the second argument.
The comparison function need not compare every byte, so arbitrary data
may be contained in the elements in addition to the values being
compared.
.P
The
\fItsearch\fR()
function shall build and access the tree. The
.IR key
argument is a pointer to an element to be accessed or stored. If there
is a node in the tree whose element is equal to the value pointed to by
.IR key ,
a pointer to this found node shall be returned. Otherwise, the value
pointed to by
.IR key
shall be inserted (that is, a new node is created and the value of
.IR key
is copied to this node), and a pointer to this node returned. Only
pointers are copied, so the application shall ensure that the calling
routine stores the data. The
.IR rootp
argument points to a variable that points to the root node of the
tree. A null pointer value for the variable pointed to by
.IR rootp
denotes an empty tree; in this case, the variable shall be set to point
to the node which shall be at the root of the new tree.
.P
Like
\fItsearch\fR(),
\fItfind\fR()
shall search for a node in the tree, returning a pointer to it if found.
However, if it is not found,
\fItfind\fR()
shall return a null pointer. The arguments for
\fItfind\fR()
are the same as for
\fItsearch\fR().
.P
The
\fItdelete\fR()
function shall delete a node from a binary search tree. The arguments
are the same as for
\fItsearch\fR().
The variable pointed to by
.IR rootp
shall be changed if the deleted node was the root of the tree. The
\fItdelete\fR()
function shall return a pointer to the parent of the deleted node, or
an unspecified non-null pointer if the deleted node was the root node,
or a null pointer if the node is not found.
.P
If
\fItsearch\fR()
adds an element to a tree, or
\fItdelete\fR()
successfully deletes an element from a tree, the concurrent use of
that tree in another thread, or use of pointers produced by a previous
call to
\fItfind\fR()
or
\fItsearch\fR(),
produces undefined results.
.P
The
\fItwalk\fR()
function shall traverse a binary search tree. The
.IR root
argument is a pointer to the root node of the tree to be traversed.
(Any node in a tree may be used as the root for a walk below that
node.) The argument
.IR action
is the name of a routine to be invoked at each node. This routine is,
in turn, called with three arguments. The first argument shall be the
address of the node being visited. The structure pointed to by this
argument is unspecified and shall not be modified by the application,
but it shall be possible to cast a pointer-to-node into a
pointer-to-pointer-to-element to access the element stored in the node.
The second argument shall be a value from an enumeration data type:
.sp
.RS 4
.nf
\fB
typedef enum { preorder, postorder, endorder, leaf } VISIT;
.fi \fR
.P
.RE
.P
(defined in
.IR <search.h> ),
depending on whether this is the first, second, or third time that the
node is visited (during a depth-first, left-to-right traversal of the
tree), or whether the node is a leaf. The third argument shall be
the level of the node in the tree, with the root being level 0.
.P
If the calling function alters the pointer to the root, the result is
undefined.
.P
If the functions pointed to by
.IR action
or
.IR compar
(for any of these binary search functions) change the tree, the results
are undefined.
.P
These functions are thread-safe only as long as multiple threads
do not access the same tree.
.SH "RETURN VALUE"
If the node is found, both
\fItsearch\fR()
and
\fItfind\fR()
shall return a pointer to it. If not,
\fItfind\fR()
shall return a null pointer, and
\fItsearch\fR()
shall return a pointer to the inserted item.
.P
A null pointer shall be returned by
\fItsearch\fR()
if there is not enough space available to create a new node.
.P
A null pointer shall be returned by
\fItdelete\fR(),
\fItfind\fR(),
and
\fItsearch\fR()
if
.IR rootp
is a null pointer on entry.
.P
The
\fItdelete\fR()
function shall return a pointer to the parent of the deleted node, or
an unspecified non-null pointer if the deleted node was the root node,
or a null pointer if the node is not found.
.P
The
\fItwalk\fR()
function shall not return a value.
.SH ERRORS
No errors are defined.
.LP
.IR "The following sections are informative."
.SH "EXAMPLES"
The following code reads in strings and stores structures containing a
pointer to each string and a count of its length. It then walks the
tree, printing out the stored strings and their lengths in alphabetical
order.
.sp
.RS 4
.nf
\fB
#include <search.h>
#include <string.h>
#include <stdio.h>
.P
#define STRSZ    10000
#define NODSZ    500
.P
struct node {      /* Pointers to these are stored in the tree. */
    char    *string;
    int     length;
};
.P
char   string_space[STRSZ];  /* Space to store strings. */
struct node nodes[NODSZ];    /* Nodes to store. */
void  *root = NULL;          /* This points to the root. */
.P
int main(int argc, char *argv[])
{
    char   *strptr = string_space;
    struct node    *nodeptr = nodes;
    void   print_node(const void *, VISIT, int);
    int    i = 0, node_compare(const void *, const void *);
.P
    while (gets(strptr) != NULL && i++ < NODSZ)  {
        /* Set node. */
        nodeptr\(mi>string = strptr;
        nodeptr\(mi>length = strlen(strptr);
        /* Put node into the tree. */
        (void) tsearch((void *)nodeptr, (void **)&root,
            node_compare);
        /* Adjust pointers, so we do not overwrite tree. */
        strptr += nodeptr\(mi>length + 1;
        nodeptr++;
    }
    twalk(root, print_node);
    return 0;
}
.P
/*
 *  This routine compares two nodes, based on an
 *  alphabetical ordering of the string field.
 */
int
node_compare(const void *node1, const void *node2)
{
    return strcmp(((const struct node *) node1)\(mi>string,
        ((const struct node *) node2)\(mi>string);
}
.P
/*
 *  This routine prints out a node, the second time
 *  twalk encounters it or if it is a leaf.
 */
void
print_node(const void *ptr, VISIT order, int level)
{
    const struct node *p = *(const struct node **) ptr;
.P
    if (order == postorder \(or\(or order == leaf)  {
        (void) printf("string = %s,  length = %d\en",
            p->string, p->length);
    }
}
.fi \fR
.P
.RE
.SH "APPLICATION USAGE"
The
.IR root
argument to
\fItwalk\fR()
is one level of indirection less than the
.IR rootp
arguments to
\fItdelete\fR()
and
\fItsearch\fR().
.P
There are two nomenclatures used to refer to the order in which tree
nodes are visited. The
\fItsearch\fR()
function uses \fBpreorder\fP, \fBpostorder\fP, and \fBendorder\fP to
refer respectively to visiting a node before any of its children, after
its left child and before its right, and after both its children. The
alternative nomenclature uses \fBpreorder\fP, \fBinorder\fP, and
\fBpostorder\fP to refer to the same visits, which could result in some
confusion over the meaning of \fBpostorder\fP.
.P
Since the return value of
\fItdelete\fR()
is an unspecified non-null pointer in the case that the root of the tree
has been deleted, applications should only use the return value of
\fItdelete\fR()
as indication of success or failure and should not assume it can be
dereferenced. Some implementations in this case will return a pointer to
the new root of the tree (or to an empty tree if the deleted root node
was the only node in the tree); other implementations return arbitrary
non-null pointers.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIhcreate\fR\^(\|)",
.IR "\fIlsearch\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<search.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
