'\" et
.TH PTHREAD_MUTEXATTR_GETTYPE "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
pthread_mutexattr_gettype,
pthread_mutexattr_settype
\(em get and set the mutex type attribute
.SH SYNOPSIS
.LP
.nf
#include <pthread.h>
.P
int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict \fIattr\fP,
    int *restrict \fItype\fP);
int pthread_mutexattr_settype(pthread_mutexattr_t *\fIattr\fP, int \fItype\fP);
.fi
.SH DESCRIPTION
The
\fIpthread_mutexattr_gettype\fR()
and
\fIpthread_mutexattr_settype\fR()
functions, respectively, shall get and set the mutex
.IR type
attribute. This attribute is set in the
.IR type
parameter to these functions. The default value of the
.IR type
attribute is PTHREAD_MUTEX_DEFAULT.
.P
The type of mutex is contained in the
.IR type
attribute of the mutex attributes. Valid mutex types include:
.sp
.RS
PTHREAD_MUTEX_NORMAL
PTHREAD_MUTEX_ERRORCHECK
PTHREAD_MUTEX_RECURSIVE
PTHREAD_MUTEX_DEFAULT
.RE
.P
The mutex type affects the behavior of calls which lock and unlock the
mutex. See
.IR "\fIpthread_mutex_lock\fR\^(\|)"
for details. An implementation may map PTHREAD_MUTEX_DEFAULT to one of
the other mutex types.
.P
The behavior is undefined if the value specified by the
.IR attr
argument to
\fIpthread_mutexattr_gettype\fR()
or
\fIpthread_mutexattr_settype\fR()
does not refer to an initialized mutex attributes object.
.SH "RETURN VALUE"
Upon successful completion, the
\fIpthread_mutexattr_gettype\fR()
function shall return zero and store the value of the
.IR type
attribute of
.IR attr
into the object referenced by the
.IR type
parameter. Otherwise, an error shall be returned to indicate the error.
.P
If successful, the
\fIpthread_mutexattr_settype\fR()
function shall return zero; otherwise, an error number shall be
returned to indicate the error.
.SH ERRORS
The
\fIpthread_mutexattr_settype\fR()
function shall fail if:
.TP
.BR EINVAL
The value
.IR type
is invalid.
.P
These functions shall not return an error code of
.BR [EINTR] .
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
It is advised that an application should not use a
PTHREAD_MUTEX_RECURSIVE mutex with condition variables
because the implicit unlock performed for a
\fIpthread_cond_timedwait\fR()
or
\fIpthread_cond_wait\fR()
may not actually release the mutex (if it had been locked multiple
times). If this happens, no other thread can satisfy the condition of
the predicate.
.SH RATIONALE
If an implementation detects that the value specified by the
.IR attr
argument to
\fIpthread_mutexattr_gettype\fR()
or
\fIpthread_mutexattr_settype\fR()
does not refer to an initialized mutex attributes object, it is
recommended that the function should fail and report an
.BR [EINVAL] 
error.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIpthread_cond_timedwait\fR\^(\|)",
.IR "\fIpthread_mutex_lock\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<pthread.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
