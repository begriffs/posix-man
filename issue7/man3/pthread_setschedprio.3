'\" et
.TH PTHREAD_SETSCHEDPRIO "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
pthread_setschedprio
\(em dynamic thread scheduling parameters access
(\fBREALTIME THREADS\fR)
.SH SYNOPSIS
.LP
.nf
#include <pthread.h>
.P
int pthread_setschedprio(pthread_t \fIthread\fP, int \fIprio\fP);
.fi
.SH DESCRIPTION
The
\fIpthread_setschedprio\fR()
function shall set the scheduling priority for the thread whose thread
ID is given by
.IR thread
to the value given by
.IR prio .
See
.IR "Scheduling Policies"
for a description on how this function call affects the ordering of the
thread in the thread list for its new priority.
.P
If the
\fIpthread_setschedprio\fR()
function fails, the scheduling priority of the target thread shall not
be changed.
.SH "RETURN VALUE"
If successful, the
\fIpthread_setschedprio\fR()
function shall return zero; otherwise, an error number shall be
returned to indicate the error.
.SH ERRORS
The
\fIpthread_setschedprio\fR()
function may fail if:
.TP
.BR EINVAL
The value of
.IR prio
is invalid for the scheduling policy of the specified thread.
.TP
.BR EPERM
The caller does not have appropriate privileges to set the scheduling
priority of the specified thread.
.P
The
\fIpthread_setschedprio\fR()
function shall not return an error code of
.BR [EINTR] .
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
None.
.SH RATIONALE
The
\fIpthread_setschedprio\fR()
function provides a way for an application to temporarily raise its
priority and then lower it again, without having the undesired
side-effect of yielding to other threads of the same priority. This is
necessary if the application is to implement its own strategies for
bounding priority inversion, such as priority inheritance or priority
ceilings. This capability is especially important if the implementation
does not support the Thread Priority Protection or Thread Priority
Inheritance options, but even if those options are supported it is
needed if the application is to bound priority inheritance for other
resources, such as semaphores.
.P
The standard developers considered that while it might be preferable
conceptually to solve this problem by modifying the specification of
\fIpthread_setschedparam\fR(),
it was too late to make such a change, as there may be implementations
that would need to be changed. Therefore, this new function was
introduced.
.P
If an implementation detects use of a thread ID after the end of its
lifetime, it is recommended that the function should fail and report an
.BR [ESRCH] 
error.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Scheduling Policies",
.IR "\fIpthread_getschedparam\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<pthread.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
