'\" et
.TH SCALBLN "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
scalbln,
scalblnf,
scalblnl,
scalbn,
scalbnf,
scalbnl
\(em compute exponent using FLT_RADIX
.SH SYNOPSIS
.LP
.nf
#include <math.h>
.P
double scalbln(double \fIx\fP, long \fIn\fP);
float scalblnf(float \fIx\fP, long \fIn\fP);
long double scalblnl(long double \fIx\fP, long \fIn\fP);
double scalbn(double \fIx\fP, int \fIn\fP);
float scalbnf(float \fIx\fP, int \fIn\fP);
long double scalbnl(long double \fIx\fP, int \fIn\fP);
.fi
.SH DESCRIPTION
The functionality described on this reference page is aligned with the
ISO\ C standard. Any conflict between the requirements described here and the
ISO\ C standard is unintentional. This volume of POSIX.1\(hy2008 defers to the ISO\ C standard.
.P
These functions shall compute \fIx\fR\ *\ FLT_RADIX\fI\s-3\un\d\s+3\fR
efficiently, not normally by computing FLT_RADIX\fI\s-3\un\d\s+3\fR
explicitly.
.P
An application wishing to check for error situations should set
.IR errno
to zero and call
.IR feclearexcept (FE_ALL_EXCEPT)
before calling these functions. On return, if
.IR errno
is non-zero or \fIfetestexcept\fR(FE_INVALID | FE_DIVBYZERO |
FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.
.SH "RETURN VALUE"
Upon successful completion, these functions shall return
\fIx\fR\ *\ FLT_RADIX\fI\s-3\un\d\s+3\fR.
.P
If the result would cause overflow, a range error shall occur and these
functions shall return \(+-HUGE_VAL, \(+-HUGE_VALF, and \(+-HUGE_VALL
(according to the sign of
.IR x )
as appropriate for the return type of the function.
.P
If the correct value would cause underflow,
and is not representable,
a range error may occur, and
\fIscalbln\fR(),
\fIscalblnf\fR(),
\fIscalblnl\fR(),
\fIscalbn\fR(),
\fIscalbnf\fR(),
and
\fIscalbnl\fR()
shall return
0.0, or
(if IEC 60559 Floating-Point is not supported) an implementation-defined
value no greater in magnitude than DBL_MIN, FLT_MIN, LDBL_MIN, DBL_MIN,
FLT_MIN, and LDBL_MIN, respectively.
.P
If
.IR x
is NaN, a NaN shall be returned.
.P
If
.IR x
is \(+-0 or \(+-Inf,
.IR x
shall be returned.
.P
If
.IR n
is 0,
.IR x
shall be returned.
.P
If the correct value would cause underflow, and is representable, a
range error may occur and the correct value shall be returned.
.SH ERRORS
These functions shall fail if:
.IP "Range\ Error" 12
The result overflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the overflow floating-point exception shall be raised.
.RE
.br
.P
These functions may fail if:
.IP "Range\ Error" 12
The result underflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the underflow floating-point exception shall be raised.
.RE
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
On error, the expressions (\fImath_errhandling\fR & MATH_ERRNO) and
(\fImath_errhandling\fR & MATH_ERREXCEPT) are independent of each
other, but at least one of them must be non-zero.
.SH RATIONALE
These functions are named so as to avoid conflicting with the
historical definition of the
.IR scalb (\|)
function from the Single UNIX Specification. The difference is that the
.IR scalb (\|)
function has a second argument of
.BR double
instead of
.BR int .
The
.IR scalb (\|)
function is not part of the ISO\ C standard. The three functions whose second
type is
.BR long
are provided because the factor required to scale from the smallest
positive floating-point value to the largest finite one, on many
implementations, is too large to represent in the minimum-width
.BR int
format.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIfeclearexcept\fR\^(\|)",
.IR "\fIfetestexcept\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 4.19" ", " "Treatment of Error Conditions for Mathematical Functions",
.IR "\fB<math.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
