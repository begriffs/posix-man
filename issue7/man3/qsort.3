'\" et
.TH QSORT "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
qsort
\(em sort a table of data
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>
.P
void qsort(void *\fIbase\fP, size_t \fInel\fP, size_t \fIwidth\fP,
    int (*\fIcompar\fP)(const void *, const void *));
.fi
.SH DESCRIPTION
The functionality described on this reference page is aligned with the
ISO\ C standard. Any conflict between the requirements described here and the
ISO\ C standard is unintentional. This volume of POSIX.1\(hy2008 defers to the ISO\ C standard.
.P
The
\fIqsort\fR()
function shall sort an array of
.IR nel
objects, the initial element of which is pointed to by
.IR base .
The size of each object, in bytes, is specified by the
.IR width
argument. If the
.IR nel
argument has the value zero, the comparison function pointed to by
.IR compar
shall not be called and no rearrangement shall take place.
.P
The application shall ensure that the comparison function pointed to by
.IR compar
does not alter the contents of the array. The implementation may
reorder elements of the array between calls to the comparison function,
but shall not alter the contents of any individual element.
.P
When the same objects (consisting of width bytes, irrespective of their
current positions in the array) are passed more than once to the
comparison function, the results shall be consistent with one another.
That is, they shall define a total ordering on the array.
.P
The contents of the array shall be sorted in ascending order according
to a comparison function. The
.IR compar
argument is a pointer to the comparison function, which is called with
two arguments that point to the elements being compared. The
application shall ensure that the function returns an integer less
than, equal to, or greater than 0, if the first argument is considered
respectively less than, equal to, or greater than the second. If two
members compare as equal, their order in the sorted array is
unspecified.
.SH "RETURN VALUE"
The
\fIqsort\fR()
function shall not return a value.
.SH ERRORS
No errors are defined.
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
The comparison function need not compare every byte, so arbitrary data
may be contained in the elements in addition to the values being
compared.
.SH RATIONALE
The requirement that each argument (hereafter referred to as
.IR p)
to the comparison function is a pointer to elements of the array
implies that for every call, for each argument separately, all of the
following expressions are non-zero:
.sp
.RS 4
.nf
\fB
((char *)p \(mi (char *)base) % width == 0
(char *)p >= (char *)base
(char *)p < (char *)base + nel * width
.fi \fR
.P
.RE
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIalphasort\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<stdlib.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
