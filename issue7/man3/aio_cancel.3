'\" et
.TH AIO_CANCEL "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
aio_cancel
\(em cancel an asynchronous I/O request
.SH SYNOPSIS
.LP
.nf
#include <aio.h>
.P
int aio_cancel(int \fIfildes\fP, struct aiocb *\fIaiocbp\fP);
.fi
.SH DESCRIPTION
The
\fIaio_cancel\fR()
function shall attempt to cancel one or more asynchronous I/O requests
currently outstanding against file descriptor
.IR fildes .
The
.IR aiocbp
argument points to the asynchronous I/O control block for a particular
request to be canceled. If
.IR aiocbp
is NULL, then all outstanding cancelable asynchronous I/O requests
against
.IR fildes
shall be canceled.
.P
Normal asynchronous notification shall occur for asynchronous I/O
operations that are successfully canceled. If there are requests that
cannot be canceled, then the normal asynchronous completion process
shall take place for those requests when they are completed.
.P
For requested operations that are successfully canceled, the associated
error status shall be set to
.BR [ECANCELED] 
and the return status shall be \(mi1. For requested operations that are
not successfully canceled, the
.IR aiocbp
shall not be modified by
\fIaio_cancel\fR().
.P
If
.IR aiocbp
is not NULL, then if
.IR fildes
does not have the same value as the file descriptor with which the
asynchronous operation was initiated, unspecified results occur.
.P
Which operations are cancelable is implementation-defined.
.SH "RETURN VALUE"
The
\fIaio_cancel\fR()
function shall return the value AIO_CANCELED
if the requested operation(s) were canceled.
The value AIO_NOTCANCELED
shall be returned if at least one of the requested operation(s) cannot
be canceled because it is in progress. In this case, the state of the
other operations, if any, referenced in the call to
\fIaio_cancel\fR()
is not indicated by the return value of
\fIaio_cancel\fR().
The application may determine the state of affairs for these operations
by using
\fIaio_error\fR().
The value AIO_ALLDONE
is returned if all of the operations have already completed.
Otherwise, the function shall return \(mi1 and set
.IR errno
to indicate the error.
.SH ERRORS
The
\fIaio_cancel\fR()
function shall fail if:
.TP
.BR EBADF
The
.IR fildes
argument is not a valid file descriptor.
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIaio_read\fR\^(\|)",
.IR "\fIaio_write\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<aio.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
