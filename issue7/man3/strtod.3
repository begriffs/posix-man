'\" et
.TH STRTOD "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
strtod,
strtof,
strtold
\(em convert a string to a double-precision number
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>
.P
double strtod(const char *restrict \fInptr\fP, char **restrict \fIendptr\fP);
float strtof(const char *restrict \fInptr\fP, char **restrict \fIendptr\fP);
long double strtold(const char *restrict \fInptr\fP, char **restrict \fIendptr\fP);
.fi
.SH DESCRIPTION
The functionality described on this reference page is aligned with the
ISO\ C standard. Any conflict between the requirements described here and the
ISO\ C standard is unintentional. This volume of POSIX.1\(hy2008 defers to the ISO\ C standard.
.P
These functions shall convert the initial portion of the string pointed
to by
.IR nptr
to
.BR double ,
.BR float ,
and
.BR "long double"
representation, respectively. First, they decompose the input string
into three parts:
.IP " 1." 4
An initial, possibly empty, sequence of white-space characters (as
specified by
\fIisspace\fR())
.IP " 2." 4
A subject sequence interpreted as a floating-point constant or
representing infinity or NaN
.IP " 3." 4
A final string of one or more unrecognized characters, including the
terminating NUL character of the input string
.P
Then they shall attempt to convert the subject sequence to a
floating-point number, and return the result.
.P
The expected form of the subject sequence is an optional
.BR '+' 
or
.BR '\(mi' 
sign, then one of the following:
.IP " *" 4
A non-empty sequence of decimal digits optionally containing a radix
character; then an optional exponent part consisting of the character
.BR 'e' 
or the character
.BR 'E' ,
optionally followed by a
.BR '+' 
or
.BR '\(mi' 
character, and then followed by one or more decimal digits
.IP " *" 4
A 0x or 0X, then a non-empty sequence of hexadecimal digits optionally
containing a radix character; then an optional binary exponent part
consisting of the character
.BR 'p' 
or the character
.BR 'P' ,
optionally followed by a
.BR '+' 
or
.BR '\(mi' 
character, and then followed by one or more decimal digits
.IP " *" 4
One of INF or INFINITY, ignoring case
.IP " *" 4
One of NAN or NAN(\fIn-char-sequence\s-3\dopt\u\s+3\fR), ignoring case in
the NAN part, where:
.RS 4 
.sp
.RS 4
.nf
\fB
n-char-sequence:
    digit
    nondigit
    n-char-sequence digit
    n-char-sequence nondigit
.fi \fR
.P
.RE
.RE
.P
The subject sequence is defined as the longest initial subsequence of
the input string, starting with the first non-white-space character,
that is of the expected form. The subject sequence contains no
characters if the input string is not of the expected form.
.P
If the subject sequence has the expected form for a floating-point
number, the sequence of characters starting with the first digit or the
decimal-point character (whichever occurs first) shall be interpreted
as a floating constant of the C language, except that the radix
character shall be used in place of a period, and that if neither an
exponent part nor a radix character appears in a decimal floating-point
number, or if a binary exponent part does not appear in a hexadecimal
floating-point number, an exponent part of the appropriate type with
value zero is assumed to follow the last digit in the string. If the
subject sequence begins with a minus-sign, the sequence shall be
interpreted as negated. A character sequence INF or INFINITY shall be
interpreted as an infinity, if representable in the return type, else
as if it were a floating constant that is too large for the range of
the return type. A character sequence NAN or
NAN(\fIn-char-sequence\s-3\dopt\u\s+3\fR) shall be interpreted as a
quiet NaN, if supported in the return type, else as if it were a
subject sequence part that does not have the expected form; the meaning
of the \fIn\fR-char sequences is implementation-defined. A pointer to
the final string is stored in the object pointed to by
.IR endptr ,
provided that
.IR endptr
is not a null pointer.
.P
If the subject sequence has the hexadecimal form and FLT_RADIX is a
power of 2, the value resulting from the conversion is correctly
rounded.
.P
The radix character is defined in the current locale (category
.IR LC_NUMERIC ).
In the POSIX locale, or in a locale where the radix character is not
defined, the radix character shall default to a
<period>
(\c
.BR '.' ).
.P
In other than the C
or POSIX
locales, other implementation-defined subject sequences may be
accepted.
.P
If the subject sequence is empty or does not have the expected form, no
conversion shall be performed; the value of
.IR nptr
is stored in the object pointed to by
.IR endptr ,
provided that
.IR endptr
is not a null pointer.
.P
These functions shall not change the setting of
.IR errno
if successful.
.P
Since 0 is returned on error and is also a valid return on success,
an application wishing to check for error situations should set
.IR errno
to 0, then call
\fIstrtod\fR(),
\fIstrtof\fR(),
or
\fIstrtold\fR(),
then check
.IR errno .
.SH "RETURN VALUE"
Upon successful completion, these functions shall return the converted
value. If no conversion could be performed, 0 shall be returned, and
.IR errno
may be set to
.BR [EINVAL] .
.P
If the correct value is outside the range of representable values,
\(+-HUGE_VAL, \(+-HUGE_VALF, or \(+-HUGE_VALL shall be returned
(according to the sign of the value), and
.IR errno
shall be set to
.BR [ERANGE] .
.P
If the correct value would cause an underflow, a value whose magnitude
is no greater than the smallest normalized positive number in the
return type shall be returned and
.IR errno
set to
.BR [ERANGE] .
.SH ERRORS
These functions shall fail if:
.TP
.BR ERANGE
The value to be returned would cause overflow
or underflow.
.P
These functions may fail if:
.TP
.BR EINVAL
No conversion could be performed.
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
If the subject sequence has the hexadecimal form and FLT_RADIX is not a
power of 2, and the result is not exactly representable, the result
should be one of the two numbers in the appropriate internal format
that are adjacent to the hexadecimal floating source value, with the
extra stipulation that the error should have a correct sign for the
current rounding direction.
.P
If the subject sequence has the decimal form and at most DECIMAL_DIG
(defined in
.IR <float.h> )
significant digits, the result should be correctly rounded. If the
subject sequence
.IR D
has the decimal form and more than DECIMAL_DIG significant digits,
consider the two bounding, adjacent decimal strings
.IR L
and
.IR U ,
both having DECIMAL_DIG significant digits, such that the values of
.IR L ,
.IR D ,
and
.IR U
satisfy
.IR L
<=
.IR D
<=
.IR U .
The result should be one of the (equal or adjacent) values that would
be obtained by correctly rounding
.IR L
and
.IR U
according to the current rounding direction, with the extra stipulation
that the error with respect to
.IR D
should have a correct sign for the current rounding direction.
.P
The changes to
\fIstrtod\fR()
introduced by the ISO/IEC\ 9899:\|1999 standard can alter the behavior of well-formed
applications complying with the ISO/IEC\ 9899:\|1990 standard and thus earlier versions of
this standard. One such example would be:
.sp
.RS 4
.nf
\fB
int
what_kind_of_number (char *s)
{
    char *endp;
    double d;
    long l;
.P
    d = strtod(s, &endp);
    if (s != endp && *endp == `\e0')
        printf("It's a float with value %g\en", d);
    else
    {
        l = strtol(s, &endp, 0);
        if (s != endp && *endp == `\e0')
            printf("It's an integer with value %ld\en", 1);
        else
            return 1;
    }
    return 0;
}
.fi \fR
.P
.RE
.P
If the function is called with:
.sp
.RS 4
.nf
\fB
what_kind_of_number ("0x10")
.fi \fR
.P
.RE
.P
an ISO/IEC\ 9899:\|1990 standard-compliant library will result in the function printing:
.sp
.RS 4
.nf
\fB
It's an integer with value 16
.fi \fR
.P
.RE
.P
With the ISO/IEC\ 9899:\|1999 standard, the result is:
.sp
.RS 4
.nf
\fB
It's a float with value 16
.fi \fR
.P
.RE
.P
The change in behavior is due to the inclusion of floating-point
numbers in hexadecimal notation without requiring that either a decimal
point or the binary exponent be present.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIfscanf\fR\^(\|)",
.IR "\fIisspace\fR\^(\|)",
.IR "\fIlocaleconv\fR\^(\|)",
.IR "\fIsetlocale\fR\^(\|)",
.IR "\fIstrtol\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Chapter 7" ", " "Locale",
.IR "\fB<float.h>\fP",
.IR "\fB<stdlib.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
