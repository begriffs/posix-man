'\" et
.TH FMA "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
fma,
fmaf,
fmal
\(em floating-point multiply-add
.SH SYNOPSIS
.LP
.nf
#include <math.h>
.P
double fma(double \fIx\fP, double \fIy\fP, double \fIz\fP);
float fmaf(float \fIx\fP, float \fIy\fP, float \fIz\fP);
long double fmal(long double \fIx\fP, long double \fIy\fP, long double \fIz\fP);
.fi
.SH DESCRIPTION
The functionality described on this reference page is aligned with the
ISO\ C standard. Any conflict between the requirements described here and the
ISO\ C standard is unintentional. This volume of POSIX.1\(hy2008 defers to the ISO\ C standard.
.P
These functions shall compute (\fIx\fR\ *\ \fIy\fR)\ +\ \fIz\fR,
rounded as one ternary operation: they shall compute the value (as if)
to infinite precision and round once to the result format, according to
the rounding mode characterized by the value of FLT_ROUNDS.
.P
An application wishing to check for error situations should set
.IR errno
to zero and call
.IR feclearexcept (FE_ALL_EXCEPT)
before calling these functions. On return, if
.IR errno
is non-zero or \fIfetestexcept\fR(FE_INVALID | FE_DIVBYZERO |
FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.
.SH "RETURN VALUE"
Upon successful completion, these functions shall return
(\fIx\fR\ *\ \fIy\fR)\ + \fIz\fR, rounded as one ternary operation.
.P
If the result overflows or underflows, a range error may occur.
On systems that support the IEC 60559 Floating-Point option, if the
result overflows a range error shall occur.
.P
If
.IR x
or
.IR y
are NaN, a NaN shall be returned.
.P
If
.IR x
multiplied by
.IR y
is an exact infinity and
.IR z
is also an infinity but with the opposite sign, a domain error shall
occur, and either a NaN (if supported), or an implementation-defined
value shall be returned.
.P
If one of
.IR x
and
.IR y
is infinite, the other is zero, and
.IR z
is not a NaN, a domain error shall occur, and either a NaN (if
supported), or an implementation-defined value shall be returned.
.P
If one of
.IR x
and
.IR y
is infinite, the other is zero, and
.IR z
is a NaN, a NaN shall be returned and a domain error may occur.
.P
If
.IR x *\c
.IR y
is not 0*Inf nor Inf*0 and
.IR z
is a NaN, a NaN shall be returned.
.SH ERRORS
These functions shall fail if:
.IP "Domain\ Error" 12
The value of
.IR x *\c
.IR y +\c
.IR z
is invalid, or the value
.IR x *\c
.IR y
is invalid and
.IR z
is not a NaN.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [EDOM] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the invalid floating-point exception shall be raised.
.RE
.IP "Range\ Error" 12
The result overflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the overflow floating-point exception shall be raised.
.RE
.br
.P
These functions may fail if:
.IP "Domain\ Error" 12
The value
.IR x *\c
.IR y
is invalid and
.IR z
is a NaN.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [EDOM] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the invalid floating-point exception shall be raised.
.RE
.IP "Range\ Error" 12
The result underflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the underflow floating-point exception shall be raised.
.RE
.IP "Range\ Error" 12
The result overflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the overflow floating-point exception shall be raised.
.RE
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
On error, the expressions (\fImath_errhandling\fR & MATH_ERRNO) and
(\fImath_errhandling\fR & MATH_ERREXCEPT) are independent of each
other, but at least one of them must be non-zero.
.SH RATIONALE
In many cases, clever use of floating (\fIfused\fR) multiply-add leads
to much improved code; but its unexpected use by the compiler can
undermine carefully written code. The FP_CONTRACT macro can be used to
disallow use of floating multiply-add; and the
\fIfma\fR()
function guarantees its use where desired. Many current machines
provide hardware floating multiply-add instructions; software
implementation can be used for others.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIfeclearexcept\fR\^(\|)",
.IR "\fIfetestexcept\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 4.19" ", " "Treatment of Error Conditions for Mathematical Functions",
.IR "\fB<math.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
