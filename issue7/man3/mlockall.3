'\" et
.TH MLOCKALL "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
mlockall,
munlockall
\(em lock/unlock the address space of a process
(\fBREALTIME\fP)
.SH SYNOPSIS
.LP
.nf
#include <sys/mman.h>
.P
int mlockall(int \fIflags\fP);
int munlockall(void);
.fi
.SH DESCRIPTION
The
\fImlockall\fR()
function shall cause all of the pages mapped by the address space of a
process to be memory-resident until unlocked or until the process exits
or
.IR exec s
another process image. The
.IR flags
argument determines whether the pages to be locked are those currently
mapped by the address space of the process, those that are mapped
in the future, or both. The
.IR flags
argument is constructed from the bitwise-inclusive OR of one or more
of the following symbolic constants, defined in
.IR <sys/mman.h> :
.IP MCL_CURRENT 12
Lock all of the pages currently mapped into the address space of the
process.
.IP MCL_FUTURE 12
Lock all of the pages that become mapped into the address space of the
process in the future, when those mappings are established.
.P
If MCL_FUTURE is specified, and the automatic locking of future
mappings eventually causes the amount of locked memory to exceed the
amount of available physical memory or any other
implementation-defined limit, the behavior is
implementation-defined. The manner in which the implementation
informs the application of these situations is also
implementation-defined.
.P
The
\fImunlockall\fR()
function shall unlock all currently mapped pages of the address space
of the process. Any pages that become mapped into the address space of
the process after a call to
\fImunlockall\fR()
shall not be locked, unless there is an intervening call to
\fImlockall\fR()
specifying MCL_FUTURE or a subsequent call to
\fImlockall\fR()
specifying MCL_CURRENT. If pages mapped into the address space of the
process are also mapped into the address spaces of other processes and
are locked by those processes, the locks established by the other
processes shall be unaffected by a call by this process to
\fImunlockall\fR().
.P
Upon successful return from the
\fImlockall\fR()
function that specifies MCL_CURRENT, all currently mapped pages of the
address space of the process shall be memory-resident and locked.
Upon return from the
\fImunlockall\fR()
function, all currently mapped pages of the address space of the process
shall be unlocked with respect to the address space of the process.
The memory residency of unlocked pages is unspecified.
.P
Appropriate privileges are required to lock process memory with
\fImlockall\fR().
.SH "RETURN VALUE"
Upon successful completion, the
\fImlockall\fR()
function shall return a value of zero. Otherwise, no additional memory
shall be locked, and the function shall return a value of \(mi1 and set
.IR errno
to indicate the error. The effect of failure of
\fImlockall\fR()
on previously existing locks in the address space is unspecified.
.P
If it is supported by the implementation, the
\fImunlockall\fR()
function shall always return a value of zero. Otherwise, the function
shall return a value of \(mi1 and set
.IR errno
to indicate the error.
.SH ERRORS
The
\fImlockall\fR()
function shall fail if:
.TP
.BR EAGAIN
Some or all of the memory identified by the operation could not be
locked when the call was made.
.TP
.BR EINVAL
The
.IR flags
argument is zero, or includes unimplemented flags.
.P
The
\fImlockall\fR()
function may fail if:
.TP
.BR ENOMEM
Locking all of the pages currently mapped into the address space of the
process would exceed an implementation-defined limit on the amount of
memory that the process may lock.
.TP
.BR EPERM
The calling process does not have appropriate privileges to perform
the requested operation.
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIexec\fR\^",
.IR "\fIexit\fR\^(\|)",
.IR "\fIfork\fR\^(\|)",
.IR "\fImlock\fR\^(\|)",
.IR "\fImunmap\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<sys_mman.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
