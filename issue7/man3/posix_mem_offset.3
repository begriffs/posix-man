'\" et
.TH POSIX_MEM_OFFSET "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
posix_mem_offset
\(em find offset and length of a mapped typed memory block
(\fBADVANCED REALTIME\fP)
.SH SYNOPSIS
.LP
.nf
#include <sys/mman.h>
.P
int posix_mem_offset(const void *restrict \fIaddr\fP, size_t \fIlen\fP,
    off_t *restrict \fIoff\fP, size_t *restrict \fIcontig_len\fP,
    int *restrict \fIfildes\fP);
.fi
.SH DESCRIPTION
The
\fIposix_mem_offset\fR()
function shall return in the variable pointed to by
.IR off
a value that identifies the offset (or location), within a memory
object, of the memory block currently mapped at
.IR addr .
The function shall return in the variable pointed to by
.IR fildes ,
the descriptor used (via
\fImmap\fR())
to establish the mapping which contains
.IR addr .
If that descriptor was closed since the mapping was established, the
returned value of
.IR fildes
shall be \(mi1. The
.IR len
argument specifies the length of the block of the memory object the
user wishes the offset for; upon return, the value pointed to by
.IR contig_len
shall equal either
.IR len ,
or the length of the largest contiguous block of the memory object that
is currently mapped to the calling process starting at
.IR addr ,
whichever is smaller.
.P
If the memory object mapped at
.IR addr
is a typed memory object, then if the
.IR off
and
.IR contig_len
values obtained by calling
\fIposix_mem_offset\fR()
are used in a call to
\fImmap\fR()
with a file descriptor that refers to the same memory pool as
.IR fildes
(either through the same port or through a different port), and that
was opened with neither the POSIX_TYPED_MEM_ALLOCATE nor the
POSIX_TYPED_MEM_ALLOCATE_CONTIG flag,
the typed memory area that is mapped shall be exactly the same area
that was mapped at
.IR addr
in the address space of the process that called
\fIposix_mem_offset\fR().
.P
If the memory object specified by
.IR fildes
is not a typed memory object, then the behavior of this function is
implementation-defined.
.SH "RETURN VALUE"
Upon successful completion, the
\fIposix_mem_offset\fR()
function shall return zero; otherwise, the corresponding error status
value shall be returned.
.SH ERRORS
The
\fIposix_mem_offset\fR()
function shall fail if:
.TP
.BR EACCES
The process has not mapped a memory object supported by this function
at the given address
.IR addr .
.P
This function shall not return an error code of
.BR [EINTR] .
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fImmap\fR\^(\|)",
.IR "\fIposix_typed_mem_open\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<sys_mman.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
