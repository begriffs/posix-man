'\" et
.TH FWRITE "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
fwrite
\(em binary output
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>
.P
size_t fwrite(const void *restrict \fIptr\fP, size_t \fIsize\fP, size_t \fInitems\fP,
    FILE *restrict \fIstream\fP);
.fi
.SH DESCRIPTION
The functionality described on this reference page is aligned with the
ISO\ C standard. Any conflict between the requirements described here and the
ISO\ C standard is unintentional. This volume of POSIX.1\(hy2008 defers to the ISO\ C standard.
.P
The
\fIfwrite\fR()
function shall write, from the array pointed to by
.IR ptr ,
up to
.IR nitems
elements whose size is specified by
.IR size ,
to the stream pointed to by
.IR stream .
For each object,
.IR size
calls shall be made to the
\fIfputc\fR()
function, taking the values (in order) from an array of
.BR "unsigned char"
exactly overlaying the object. The file-position indicator for the
stream (if defined) shall be advanced by the number of bytes
successfully written. If an error occurs, the resulting value of the
file-position indicator for the stream is unspecified.
.P
The last data modification and last file status change timestamps
of the file shall be marked for update between the successful
execution of
\fIfwrite\fR()
and the next successful completion of a call to
\fIfflush\fR()
or
\fIfclose\fR()
on the same stream, or a call to
\fIexit\fR()
or
\fIabort\fR().
.SH "RETURN VALUE"
The
\fIfwrite\fR()
function shall return the number of elements successfully written,
which may be less than
.IR nitems
if a write error is encountered. If
.IR size
or
.IR nitems
is 0,
\fIfwrite\fR()
shall return 0 and the state of the stream remains unchanged. Otherwise,
if a write error occurs, the error indicator for the stream shall be set,
and
.IR errno
shall be set to indicate the error.
.SH ERRORS
Refer to
.IR "\fIfputc\fR\^(\|)".
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
Because of possible differences in element length and byte ordering,
files written using
\fIfwrite\fR()
are application-dependent, and possibly cannot be read using
\fIfread\fR()
by a different application or by the same application on a different
processor.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "Section 2.5" ", " "Standard I/O Streams",
.IR "\fIferror\fR\^(\|)",
.IR "\fIfopen\fR\^(\|)",
.IR "\fIfprintf\fR\^(\|)",
.IR "\fIputc\fR\^(\|)",
.IR "\fIputs\fR\^(\|)",
.IR "\fIwrite\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<stdio.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
