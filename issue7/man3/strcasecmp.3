'\" et
.TH STRCASECMP "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
strcasecmp,
strcasecmp_l,
strncasecmp,
strncasecmp_l
\(em case-insensitive string comparisons
.SH SYNOPSIS
.LP
.nf
#include <strings.h>
.P
int strcasecmp(const char *\fIs1\fP, const char *\fIs2\fP);
int strcasecmp_l(const char *\fIs1\fP, const char *\fIs2\fP,
    locale_t \fIlocale\fP);
int strncasecmp(const char *\fIs1\fP, const char *\fIs2\fP, size_t \fIn\fP);
int strncasecmp_l(const char *\fIs1\fP, const char *\fIs2\fP,
    size_t \fIn\fP, locale_t \fIlocale\fP);
.fi
.SH DESCRIPTION
The
\fIstrcasecmp\fR()
and
\fIstrcasecmp_l\fR()
functions shall compare, while ignoring differences in case, the
string pointed to by
.IR s1
to the string pointed to by
.IR s2 .
The
\fIstrncasecmp\fR()
and
\fIstrncasecmp_l\fR()
functions shall compare, while ignoring differences in case, not more
than
.IR n
bytes from the string pointed to by
.IR s1
to the string pointed to by
.IR s2 .
.P
The
\fIstrcasecmp\fR()
and
\fIstrncasecmp\fR()
functions use the current locale to determine the case of the characters.
.P
The
\fIstrcasecmp_l\fR()
and
\fIstrncasecmp_l\fR()
functions use the locale represented by
.IR locale
to determine the case of the characters.
.P
When the
.IR LC_CTYPE
category of the locale being used is from the POSIX locale, these
functions shall behave as if the strings had been converted to lowercase
and then a byte comparison performed. Otherwise, the results are
unspecified.
.P
The behavior is undefined if the
.IR locale
argument to
\fIstrcasecmp_l\fR()
or
\fIstrncasecmp_l\fR()
is the special locale object LC_GLOBAL_LOCALE or is not a valid locale
object handle.
.SH "RETURN VALUE"
Upon completion,
\fIstrcasecmp\fR()
and
\fIstrcasecmp_l\fR()
shall return an integer greater than, equal to, or less than 0, if the
string pointed to by
.IR s1
is, ignoring case, greater than, equal to, or less than the string
pointed to by
.IR s2 ,
respectively.
.P
Upon successful completion,
\fIstrncasecmp\fR()
and
\fIstrncasecmp_l\fR()
shall return an integer greater than, equal to, or less than 0, if the
possibly null-terminated array pointed to by
.IR s1
is, ignoring case, greater than, equal to, or less than the possibly
null-terminated array pointed to by
.IR s2 ,
respectively.
.SH ERRORS
No errors are defined.
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIwcscasecmp\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<strings.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
