'\" et
.TH PTHREAD_RWLOCK_UNLOCK "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
pthread_rwlock_unlock
\(em unlock a read-write lock object
.SH SYNOPSIS
.LP
.nf
#include <pthread.h>
.P
int pthread_rwlock_unlock(pthread_rwlock_t *\fIrwlock\fP);
.fi
.SH DESCRIPTION
The
\fIpthread_rwlock_unlock\fR()
function shall release a lock held on the read-write lock object
referenced by
.IR rwlock .
Results are undefined if the read-write lock
.IR rwlock
is not held by the calling thread.
.P
If this function is called to release a read lock from the read-write
lock object and there are other read locks currently held on this
read-write lock object, the read-write lock object remains in the read
locked state. If this function releases the last read lock for this
read-write lock object, the read-write lock object shall be put in the
unlocked state with no owners.
.P
If this function is called to release a write lock for this read-write
lock object, the read-write lock object shall be put in the unlocked
state.
.P
If there are threads blocked on the lock when it becomes available, the
scheduling policy shall determine which thread(s) shall acquire the
lock.
If the Thread Execution Scheduling option is supported, when threads
executing with the scheduling policies SCHED_FIFO, SCHED_RR, or
SCHED_SPORADIC are waiting on the lock, they shall acquire the lock in
priority order when the lock becomes available. For equal priority
threads, write locks shall take precedence over read locks.
If the Thread Execution Scheduling option is not supported, it is
implementation-defined whether write locks take precedence over read
locks.
.P
Results are undefined if this function is called with an uninitialized
read-write lock.
.SH "RETURN VALUE"
If successful, the
\fIpthread_rwlock_unlock\fR()
function shall return zero; otherwise, an error number shall be
returned to indicate the error.
.SH ERRORS
The
\fIpthread_rwlock_unlock\fR()
function shall not return an error code of
.BR [EINTR] .
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
None.
.SH RATIONALE
If an implementation detects that the value specified by the
.IR rwlock
argument to
\fIpthread_rwlock_unlock\fR()
does not refer to an initialized read-write lock object, it is
recommended that the function should fail and report an
.BR [EINVAL] 
error.
.P
If an implementation detects that the value specified by the
.IR rwlock
argument to
\fIpthread_rwlock_unlock\fR()
refers to a read-write lock object for which the current thread does
not hold a lock, it is recommended that the function should fail
and report an
.BR [EPERM] 
error.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.ad l
.IR "\fIpthread_rwlock_destroy\fR\^(\|)",
.IR "\fIpthread_rwlock_rdlock\fR\^(\|)",
.IR "\fIpthread_rwlock_timedrdlock\fR\^(\|)",
.IR "\fIpthread_rwlock_timedwrlock\fR\^(\|)",
.IR "\fIpthread_rwlock_trywrlock\fR\^(\|)"
.ad b
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 4.11" ", " "Memory Synchronization",
.IR "\fB<pthread.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
