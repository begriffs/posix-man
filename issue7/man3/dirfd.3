'\" et
.TH DIRFD "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
dirfd
\(em extract the file descriptor used by a DIR stream
.SH SYNOPSIS
.LP
.nf
#include <dirent.h>
.P
int dirfd(DIR *\fIdirp\fP);
.fi
.SH DESCRIPTION
The
\fIdirfd\fR()
function shall return a file descriptor referring to the same directory
as the
.IR dirp
argument. This file descriptor shall be closed by a call to
\fIclosedir\fR().
If any attempt is made to close the file descriptor, or to modify the
state of the associated description, other than by means of
\fIclosedir\fR(),
\fIreaddir\fR(),
\fIreaddir_r\fR(),
\fIrewinddir\fR(),
or
\fIseekdir\fR(),
the behavior is undefined.
.SH "RETURN VALUE"
Upon successful completion, the
\fIdirfd\fR()
function shall return an integer which contains a file descriptor for
the stream pointed to by
.IR dirp .
Otherwise, it shall return \(mi1 and may set
.IR errno
to indicate the error.
.SH ERRORS
The
\fIdirfd\fR()
function may fail if:
.TP
.BR EINVAL
The
.IR dirp
argument does not refer to a valid directory stream.
.TP
.BR ENOTSUP
The implementation does not support the association of a file
descriptor with a directory.
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
The
\fIdirfd\fR()
function is intended to be a mechanism by which an application may
obtain a file descriptor to use for the
\fIfchdir\fR()
function.
.SH RATIONALE
This interface was introduced because the Base Definitions volume of POSIX.1\(hy2008 does not make public
the
.BR DIR
data structure. Applications tend to use the
\fIfchdir\fR()
function on the file descriptor returned by this interface, and this
has proven useful for security reasons; in particular, it is a better
technique than others where directory names might change.
.P
The description uses the term ``a file descriptor'' rather than ``the
file descriptor''. The implication intended is that an implementation
that does not use an
.IR fd
for
\fIopendir\fR()
could still
\fIopen\fR()
the directory to implement the
\fIdirfd\fR()
function. Such a descriptor must be closed later during a call to
\fIclosedir\fR().
.P
An implementation that does not support file descriptors referring to
directories may fail with
.BR [ENOTSUP] .
.P
If it is necessary to allocate an
.IR fd
to be returned by
\fIdirfd\fR(),
it should be done at the time of a call to
\fIopendir\fR().
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIclosedir\fR\^(\|)",
.IR "\fIfchdir\fR\^(\|)",
.IR "\fIfdopendir\fR\^(\|)",
.IR "\fIfileno\fR\^(\|)",
.IR "\fIopen\fR\^(\|)",
.IR "\fIreaddir\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<dirent.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
