'\" et
.TH PTHREAD_MUTEX_GETPRIOCEILING "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
pthread_mutex_getprioceiling,
pthread_mutex_setprioceiling
\(em get and set the priority ceiling of a mutex
(\fBREALTIME THREADS\fP)
.SH SYNOPSIS
.LP
.nf
#include <pthread.h>
.P
int pthread_mutex_getprioceiling(const pthread_mutex_t *restrict \fImutex\fP,
    int *restrict \fIprioceiling\fP);
int pthread_mutex_setprioceiling(pthread_mutex_t *restrict \fImutex\fP,
    int \fIprioceiling\fP, int *restrict \fIold_ceiling\fP);
.fi
.SH DESCRIPTION
The
\fIpthread_mutex_getprioceiling\fR()
function shall return the current priority ceiling of the mutex.
.P
The
\fIpthread_mutex_setprioceiling\fR()
function shall attempt to lock the mutex as if by a call to
\fIpthread_mutex_lock\fR(),
except that the process of locking the mutex need not adhere to the
priority protect protocol. On acquiring the mutex it shall change the
mutex's priority ceiling and then release the mutex as if by a call to
\fIpthread_mutex_unlock\fR().
When the change is successful, the previous value of the priority ceiling
shall be returned in
.IR old_ceiling .
.P
If the
\fIpthread_mutex_setprioceiling\fR()
function fails, the mutex priority ceiling shall not be changed.
.SH "RETURN VALUE"
If successful, the
\fIpthread_mutex_getprioceiling\fR()
and
\fIpthread_mutex_setprioceiling\fR()
functions shall return zero; otherwise, an error number shall be
returned to indicate the error.
.SH ERRORS
These functions shall fail if:
.TP
.BR EINVAL
The protocol attribute of
.IR mutex
is PTHREAD_PRIO_NONE.
.TP
.BR EPERM
The implementation requires appropriate privileges to perform the
operation and the caller does not have appropriate privileges.
.P
The
\fIpthread_mutex_setprioceiling\fR()
function shall fail if:
.TP
.BR EAGAIN
The mutex could not be acquired because the maximum number of recursive
locks for
.IR mutex
has been exceeded.
.TP
.BR EDEADLK
The mutex type is PTHREAD_MUTEX_ERRORCHECK and the current
thread already owns the mutex.
.TP
.BR EINVAL
The mutex was created with the protocol attribute having the value
PTHREAD_PRIO_PROTECT and the calling thread's priority is higher than
the mutex's current priority ceiling, and the implementation adheres to
the priority protect protocol in the process of locking the mutex.
.TP
.BR ENOTRECOVERABLE
.br
The mutex is a robust mutex and the state protected by the mutex is
not recoverable.
.TP
.BR EOWNERDEAD
.br
The mutex is a robust mutex and the process containing the previous
owning thread terminated while holding the mutex lock. The mutex lock
shall be acquired by the calling thread and it is up to the new owner
to make the state consistent (see
.IR "\fIpthread_mutex_lock\fR\^(\|)").
.P
The
\fIpthread_mutex_setprioceiling\fR()
function may fail if:
.TP
.BR EDEADLK
A deadlock condition was detected.
.TP
.BR EINVAL
The priority requested by
.IR prioceiling
is out of range.
.TP
.BR EOWNERDEAD
.br
The mutex is a robust mutex and the previous owning thread terminated
while holding the mutex lock. The mutex lock shall be acquired by the
calling thread and it is up to the new owner to make the state
consistent (see
.IR "\fIpthread_mutex_lock\fR\^(\|)").
.P
These functions shall not return an error code of
.BR [EINTR] .
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
None.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIpthread_mutex_destroy\fR\^(\|)",
.IR "\fIpthread_mutex_lock\fR\^(\|)",
.IR "\fIpthread_mutex_timedlock\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "\fB<pthread.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
