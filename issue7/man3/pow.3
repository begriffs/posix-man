'\" et
.TH POW "3" 2013 "IEEE/The Open Group" "POSIX Programmer's Manual"

.SH NAME
pow,
powf,
powl
\(em power function
.SH SYNOPSIS
.LP
.nf
#include <math.h>
.P
double pow(double \fIx\fP, double \fIy\fP);
float powf(float \fIx\fP, float \fIy\fP);
long double powl(long double \fIx\fP, long double \fIy\fP);
.fi
.SH DESCRIPTION
The functionality described on this reference page is aligned with the
ISO\ C standard. Any conflict between the requirements described here and the
ISO\ C standard is unintentional. This volume of POSIX.1\(hy2008 defers to the ISO\ C standard.
.P
These functions shall compute the value of
.IR x
raised to the power
.IR y ,
.IR x\u\s-3y\s+3\d .
If
.IR x
is negative, the application shall ensure that
.IR y
is an integer value.
.P
An application wishing to check for error situations should set
.IR errno
to zero and call
.IR feclearexcept (FE_ALL_EXCEPT)
before calling these functions. On return, if
.IR errno
is non-zero or \fIfetestexcept\fR(FE_INVALID | FE_DIVBYZERO |
FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.
.SH "RETURN VALUE"
Upon successful completion, these functions shall return the value of
.IR x
raised to the power
.IR y .
.P
For finite values of
.IR x
< 0, and finite non-integer values of
.IR y ,
a domain error shall occur and
either a NaN (if representable), or
an implementation-defined value shall be returned.
.P
If the correct value would cause overflow, a range error shall occur
and
\fIpow\fR(),
\fIpowf\fR(),
and
\fIpowl\fR()
shall return \(+-HUGE_VAL, \(+-HUGE_VALF, and \(+-HUGE_VALL,
respectively, with the same sign as the correct value of the function.
.P
If the correct value would cause underflow,
and is not representable,
a range error may occur, and
\fIpow\fR(),
\fIpowf\fR(),
and
\fIpowl\fR()
shall return
0.0, or
(if IEC 60559 Floating-Point is not supported) an implementation-defined
value no greater in magnitude than DBL_MIN, FLT_MIN, and LDBL_MIN,
respectively.
.P
For
.IR y
< 0, if
.IR x
is zero, a
pole
error may occur and
\fIpow\fR(),
\fIpowf\fR(),
and
\fIpowl\fR()
shall return \(+-HUGE_VAL, \(+-HUGE_VALF, and \(+-HUGE_VALL, respectively.
On systems that support the IEC 60559 Floating-Point option, if
.IR x
is \(+-0, a pole error shall occur and
\fIpow\fR(),
\fIpowf\fR(),
and
\fIpowl\fR()
shall return \(+-HUGE_VAL, \(+-HUGE_VALF, and \(+-HUGE_VALL, respectively
if
.IR y
is an odd integer, or HUGE_VAL, HUGE_VALF, and HUGE_VALL, respectively if
.IR y
is not an odd integer.
.P
If
.IR x
or
.IR y
is a NaN, a NaN shall be returned (unless specified elsewhere in this
description).
.P
For any value of
.IR y
(including NaN), if
.IR x
is +1, 1.0 shall be returned.
.P
For any value of
.IR x
(including NaN), if
.IR y
is \(+-0, 1.0 shall be returned.
.P
For any odd integer value of
.IR y
> 0, if
.IR x
is \(+-0, \(+-0 shall be returned.
.P
For
.IR y
> 0 and not an odd integer, if
.IR x
is \(+-0, +0 shall be returned.
.P
If
.IR x
is \(mi1, and
.IR y
is \(+-Inf, 1.0 shall be returned.
.P
For |\fIx\fP| < 1, if
.IR y
is \(miInf, +Inf shall be returned.
.P
For |\fIx\fP| > 1, if
.IR y
is \(miInf, +0 shall be returned.
.P
For |\fIx\fP| < 1, if
.IR y
is +Inf, +0 shall be returned.
.P
For |\fIx\fP| > 1, if
.IR y
is +Inf, +Inf shall be returned.
.P
For
.IR y
an odd integer < 0, if
.IR x
is \(miInf, \(mi0 shall be returned.
.P
For
.IR y
< 0 and not an odd integer, if
.IR x
is \(miInf, +0 shall be returned.
.P
For
.IR y
an odd integer > 0, if
.IR x
is \(miInf, \(miInf shall be returned.
.P
For
.IR y
> 0 and not an odd integer, if
.IR x
is \(miInf, +Inf shall be returned.
.P
For
.IR y
< 0, if
.IR x
is +Inf, +0 shall be returned.
.P
For
.IR y
> 0, if
.IR x
is +Inf, +Inf shall be returned.
.P
If the correct value would cause underflow, and is representable, a
range error may occur and the correct value shall be returned.
.SH ERRORS
These functions shall fail if:
.IP "Domain\ Error" 12
The value of
.IR x
is negative and
.IR y
is a finite non-integer.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [EDOM] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the invalid floating-point exception shall be raised.
.RE
.IP "Pole\ Error" 12
The value of
.IR x
is zero and
.IR y
is negative.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the divide-by-zero floating-point exception shall be
raised.
.RE
.IP "Range\ Error" 12
The result overflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the overflow floating-point exception shall be raised.
.RE
.P
These functions may fail if:
.IP "Pole\ Error" 12
The value of
.IR x
is zero and
.IR y
is negative.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the divide-by-zero floating-point exception shall be
raised.
.RE
.IP "Range\ Error" 12
The result underflows.
.RS 12 
.P
If the integer expression (\fImath_errhandling\fR & MATH_ERRNO) is
non-zero, then
.IR errno
shall be set to
.BR [ERANGE] .
If the integer expression (\fImath_errhandling\fR & MATH_ERREXCEPT) is
non-zero, then the underflow floating-point exception shall be raised.
.RE
.LP
.IR "The following sections are informative."
.SH EXAMPLES
None.
.SH "APPLICATION USAGE"
On error, the expressions (\fImath_errhandling\fR & MATH_ERRNO) and
(\fImath_errhandling\fR & MATH_ERREXCEPT) are independent of each
other, but at least one of them must be non-zero.
.SH RATIONALE
None.
.SH "FUTURE DIRECTIONS"
None.
.SH "SEE ALSO"
.IR "\fIexp\fR\^(\|)",
.IR "\fIfeclearexcept\fR\^(\|)",
.IR "\fIfetestexcept\fR\^(\|)",
.IR "\fIisnan\fR\^(\|)"
.P
The Base Definitions volume of POSIX.1\(hy2008,
.IR "Section 4.19" ", " "Treatment of Error Conditions for Mathematical Functions",
.IR "\fB<math.h>\fP"
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 7, Copyright (C) 2013 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
(This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.unix.org/online.html .

Any typographical or formatting errors that appear
in this page are most likely
to have been introduced during the conversion of the source files to
man page format. To report such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html .
