.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "PTHREAD_BARRIER_DESTROY" 3 2003 "IEEE/The Open Group" "POSIX Programmer's Manual"
.\" pthread_barrier_destroy 
.SH NAME
pthread_barrier_destroy, pthread_barrier_init \- destroy and initialize
a barrier object (\fBADVANCED REALTIME
THREADS\fP)
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_barrier_destroy(pthread_barrier_t *\fP\fIbarrier\fP\fB);
.br
int pthread_barrier_init(pthread_barrier_t *restrict\fP \fIbarrier\fP\fB,
.br
\ \ \ \ \ \  const pthread_barrierattr_t *restrict\fP \fIattr\fP\fB,
unsigned\fP \fIcount\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
The \fIpthread_barrier_destroy\fP() function shall destroy the barrier
referenced by \fIbarrier\fP and release any resources
used by the barrier. The effect of subsequent use of the barrier is
undefined until the barrier is reinitialized by another call to
\fIpthread_barrier_init\fP(). An implementation may use this function
to set \fIbarrier\fP to an invalid value. The results are
undefined if \fIpthread_barrier_destroy\fP() is called when any thread
is blocked on the barrier, or if this function is called
with an uninitialized barrier.
.LP
The \fIpthread_barrier_init\fP() function shall allocate any resources
required to use the barrier referenced by \fIbarrier\fP
and shall initialize the barrier with attributes referenced by \fIattr\fP.
If \fIattr\fP is NULL, the default barrier attributes
shall be used; the effect is the same as passing the address of a
default barrier attributes object. The results are undefined if
\fIpthread_barrier_init\fP() is called when any thread is blocked
on the barrier (that is, has not returned from the \fIpthread_barrier_wait\fP()
call). The results are undefined if a barrier is used
without first being initialized. The results are undefined if \fIpthread_barrier_init\fP()
is called specifying an already
initialized barrier.
.LP
The \fIcount\fP argument specifies the number of threads that must
call \fIpthread_barrier_wait\fP() before any of them successfully
return from the call.
The value specified by \fIcount\fP must be greater than zero.
.LP
If the \fIpthread_barrier_init\fP() function fails, the barrier shall
not be initialized and the contents of \fIbarrier\fP are
undefined.
.LP
Only the object referenced by \fIbarrier\fP may be used for performing
synchronization. The result of referring to copies of
that object in calls to \fIpthread_barrier_destroy\fP() or \fIpthread_barrier_wait\fP()
is undefined.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return zero; otherwise,
an error number shall be returned to indicate the
error.
.SH ERRORS
.LP
The \fIpthread_barrier_destroy\fP() function may fail if:
.TP 7
.B EBUSY
The implementation has detected an attempt to destroy a barrier while
it is in use (for example, while being used in a \fIpthread_barrier_wait\fP()
call) by another thread.
.TP 7
.B EINVAL
The value specified by \fIbarrier\fP is invalid.
.sp
.LP
The \fIpthread_barrier_init\fP() function shall fail if:
.TP 7
.B EAGAIN
The system lacks the necessary resources to initialize another barrier.
.TP 7
.B EINVAL
The value specified by \fIcount\fP is equal to zero.
.TP 7
.B ENOMEM
Insufficient memory exists to initialize the barrier.
.sp
.LP
The \fIpthread_barrier_init\fP() function may fail if:
.TP 7
.B EBUSY
The implementation has detected an attempt to reinitialize a barrier
while it is in use (for example, while being used in a \fIpthread_barrier_wait\fP()
call) by another thread.
.TP 7
.B EINVAL
The value specified by \fIattr\fP is invalid.
.sp
.LP
These functions shall not return an error code of [EINTR].
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
The \fIpthread_barrier_destroy\fP() and \fIpthread_barrier_init\fP()
functions are part of the Barriers option and need not be
provided on all implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_barrier_wait\fP(), the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
