.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "FCLOSE" 3 2003 "IEEE/The Open Group" "POSIX Programmer's Manual"
.\" fclose 
.SH NAME
fclose \- close a stream
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
int fclose(FILE *\fP\fIstream\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
The \fIfclose\fP() function shall cause the stream pointed to by \fIstream\fP
to be flushed and the associated file to be
closed. Any unwritten buffered data for the stream shall be written
to the file; any unread buffered data shall be discarded.
Whether or not the call succeeds, the stream shall be disassociated
from the file and any buffer set by the \fIsetbuf\fP() or \fIsetvbuf\fP()
function shall be
disassociated from the stream. If the associated buffer was automatically
allocated, it shall be deallocated.
.LP
The
\fIfclose\fP() function shall mark for update the \fIst_ctime\fP and
\fIst_mtime\fP fields of the underlying file, if the stream
was writable, and if buffered data remains that has not yet been written
to the file. The \fIfclose\fP() function shall perform
the equivalent of a \fIclose\fP() on the file descriptor that is associated
with the stream
pointed to by \fIstream\fP. 
.LP
After the call to \fIfclose\fP(), any use of \fIstream\fP results
in undefined behavior.
.SH RETURN VALUE
.LP
Upon successful completion, \fIfclose\fP() shall return 0; otherwise,
it shall return EOF  and set
\fIerrno\fP to indicate the error. 
.SH ERRORS
.LP
The \fIfclose\fP() function shall fail if:
.TP 7
.B EAGAIN
The O_NONBLOCK flag is set for the file descriptor underlying \fIstream\fP
and the process would be delayed in the write
operation. 
.TP 7
.B EBADF
The file descriptor underlying stream is not valid. 
.TP 7
.B EFBIG
An
attempt was made to write a file that exceeds the maximum file size.
.TP 7
.B EFBIG
An attempt was made to write a file that exceeds the process' file
size limit. 
.TP 7
.B EFBIG
The file is a regular file and an attempt was made to write at or
beyond the offset maximum associated with the corresponding
stream. 
.TP 7
.B EINTR
The \fIfclose\fP() function was interrupted by a signal. 
.TP 7
.B EIO
The process is a member of a background process group attempting to
write to its controlling terminal, TOSTOP is set, the process
is neither ignoring nor blocking SIGTTOU, and the process group of
the process is orphaned. This error may also be returned under
implementation-defined conditions. 
.TP 7
.B ENOSPC
There was no free space remaining on the device containing the file.
.TP 7
.B EPIPE
An
attempt is made to write to a pipe or FIFO that is not open for reading
by any process. A SIGPIPE signal shall also be sent to the
thread. 
.sp
.LP
The \fIfclose\fP() function may fail if:
.TP 7
.B ENXIO
A
request was made of a nonexistent device, or the request was outside
the capabilities of the device. 
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclose\fP(), \fIfopen\fP(), \fIgetrlimit\fP(), \fIulimit\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<stdio.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
