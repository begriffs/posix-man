.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "GETPWNAM" 3 2003 "IEEE/The Open Group" "POSIX Programmer's Manual"
.\" getpwnam 
.SH NAME
getpwnam, getpwnam_r \- search user database for a name
.SH SYNOPSIS
.LP
\fB#include <pwd.h>
.br
.sp
struct passwd *getpwnam(const char *\fP\fIname\fP\fB);
.br
\fP
.LP
\fBint getpwnam_r(const char *\fP\fIname\fP\fB, struct passwd *\fP\fIpwd\fP\fB,
char
*\fP\fIbuffer\fP\fB,
.br
\ \ \ \ \ \  size_t\fP \fIbufsize\fP\fB, struct passwd **\fP\fIresult\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
The \fIgetpwnam\fP() function shall search the user database for an
entry with a matching \fIname\fP.
.LP
The \fIgetpwnam\fP() function need not be reentrant. A function that
is not required to be reentrant is not required to be
thread-safe.
.LP
Applications wishing to check for error situations should set \fIerrno\fP
to 0 before calling \fIgetpwnam\fP(). If
\fIgetpwnam\fP() returns a null pointer and \fIerrno\fP is non-zero,
an error occurred.
.LP
The \fIgetpwnam_r\fP() function shall update the \fBpasswd\fP structure
pointed to by \fIpwd\fP and store a pointer to that
structure at the location pointed to by \fIresult\fP. The structure
shall contain an entry from the user database with a matching
\fIname\fP. Storage referenced by the structure is allocated from
the memory provided with the \fIbuffer\fP parameter, which is
\fIbufsize\fP bytes in size. The maximum size needed for this buffer
can be determined with the {_SC_GETPW_R_SIZE_MAX} \fIsysconf\fP()
parameter. A NULL pointer shall be returned at the location pointed
to by
\fIresult\fP on error or if the requested entry is not found. 
.SH RETURN VALUE
.LP
The \fIgetpwnam\fP() function shall return a pointer to a \fBstruct
passwd\fP with the structure as defined in \fI<pwd.h>\fP with a matching
entry if found. A null pointer shall be returned if the requested
entry is not found, or an error occurs. On error, \fIerrno\fP shall
be set to indicate the error.
.LP
The return value may point to a static area which is overwritten by
a subsequent call to \fIgetpwent\fP(), \fIgetpwnam\fP(), or \fIgetpwuid\fP().
.LP
If successful, the \fIgetpwnam_r\fP() function shall return zero;
otherwise, an error number shall be returned to indicate the
error. 
.SH ERRORS
.LP
The \fIgetpwnam\fP() and \fIgetpwnam_r\fP() functions may fail if:
.TP 7
.B EIO
An I/O error has occurred.
.TP 7
.B EINTR
A signal was caught during \fIgetpwnam\fP().
.TP 7
.B EMFILE
{OPEN_MAX} file descriptors are currently open in the calling process.
.TP 7
.B ENFILE
The maximum allowable number of files is currently open in the system.
.sp
.LP
The \fIgetpwnam_r\fP() function may fail if:
.TP 7
.B ERANGE
Insufficient storage was supplied via \fIbuffer\fP and \fIbufsize\fP
to contain the data to be referenced by the resulting
\fBpasswd\fP structure. 
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.SS Getting an Entry for the Login Name
.LP
The following example uses the \fIgetlogin\fP() function to return
the name of the
user who logged in; this information is passed to the \fIgetpwnam\fP()
function to get the user database entry for that user.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <pwd.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
\&...
char *lgn;
struct passwd *pw;
\&...
if ((lgn = getlogin()) == NULL || (pw = getpwnam(lgn)) == NULL) {
    fprintf(stderr, "Get of user information failed.\\n"); exit(1);
}
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Three names associated with the current process can be determined:
\fIgetpwuid\fP( \fIgeteuid\fP()) returns the name associated with
the effective user ID of the process; \fIgetlogin\fP() returns the
name associated with the current login activity; and
\fIgetpwuid\fP( \fIgetuid\fP()) returns the name associated with the
real user ID of the
process.
.LP
The \fIgetpwnam_r\fP() function is thread-safe and returns values
in a user-supplied buffer instead of possibly using a static
data area that may be overwritten by each call.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetpwuid\fP(), the Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<limits.h>\fP, \fI<pwd.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
