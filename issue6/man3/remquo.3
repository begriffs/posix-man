.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "REMQUO" 3 2003 "IEEE/The Open Group" "POSIX Programmer's Manual"
.\" remquo 
.SH NAME
remquo, remquof, remquol \- remainder functions
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double remquo(double\fP \fIx\fP\fB, double\fP \fIy\fP\fB, int *\fP\fIquo\fP\fB);
.br
float remquof(float\fP \fIx\fP\fB, float\fP \fIy\fP\fB, int *\fP\fIquo\fP\fB);
.br
long double remquol(long double\fP \fIx\fP\fB, long double\fP \fIy\fP\fB,
int *\fP\fIquo\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
The \fIremquo\fP(), \fIremquof\fP(), and \fIremquol\fP() functions
shall compute the same remainder as the \fIremainder\fP(), \fIremainderf\fP(),
and \fIremainderl\fP() functions, respectively. In the object pointed
to by \fIquo\fP, they store
a value whose sign is the sign of \fIx\fP/ \fIy\fP and whose magnitude
is congruent modulo 2\fI**n\fP to
the magnitude of the integral quotient of \fIx\fP/ \fIy\fP, where
\fIn\fP is an implementation-defined integer greater than or
equal to 3.
.LP
An application wishing to check for error situations should set \fIerrno\fP
to zero and call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before calling these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, an error has occurred.
.SH RETURN VALUE
.LP
These functions shall return \fIx\fP REM \fIy\fP.
.LP
If
\fIx\fP or \fIy\fP is NaN, a NaN shall be returned.
.LP
If \fIx\fP is \(+-Inf or \fIy\fP is zero and the other argument is
non-NaN, a domain error shall occur, and either a NaN
(if supported), or an implementation-defined value shall be returned.
.SH ERRORS
.LP
These functions shall fail if:
.TP 7
Domain\ Error
The \fIx\fP argument is \(+-Inf, or the \fIy\fP argument is \(+-0
and the other argument is non-NaN. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [EDOM]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the invalid floating-point exception shall be raised.
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
These functions are intended for implementing argument reductions
which can exploit a few low-order bits of the quotient. Note
that \fIx\fP may be so large in magnitude relative to \fIy\fP that
an exact representation of the quotient is not practical.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfeclearexcept\fP(), \fIfetestexcept\fP(), \fIremainder\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.18,
Treatment of Error Conditions for Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
