.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "BCOPY" 3 2003 "IEEE/The Open Group" "POSIX Programmer's Manual"
.\" bcopy 
.SH NAME
bcopy \- memory operations (\fBLEGACY\fP)
.SH SYNOPSIS
.LP
\fB#include <strings.h>
.br
.sp
void bcopy(const void *\fP\fIs1\fP\fB, void *\fP\fIs2\fP\fB, size_t\fP
\fIn\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
The \fIbcopy\fP() function shall copy \fIn\fP bytes from the area
pointed to by \fIs1\fP to the area pointed to by
\fIs2\fP.
.LP
The bytes are copied correctly even if the area pointed to by \fIs1\fP
overlaps the area pointed to by \fIs2\fP.
.SH RETURN VALUE
.LP
The \fIbcopy\fP() function shall not return a value.
.SH ERRORS
.LP
No errors are defined.
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
The \fImemmove\fP() function is preferred over this function.
.LP
The following are approximately equivalent (note the order of the
arguments):
.sp
.RS
.nf

\fBbcopy(s1,s2,n) ~= memmove(s2,s1,n)
\fP
.fi
.RE
.LP
For maximum portability, it is recommended to replace the function
call to \fIbcopy\fP() as follows:
.sp
.RS
.nf

\fB#define bcopy(b1,b2,len) (memmove((b2), (b1), (len)), (void) 0)
\fP
.fi
.RE
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
This function may be withdrawn in a future version.
.SH SEE ALSO
.LP
\fImemmove\fP(), the Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<strings.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
