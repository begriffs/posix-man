.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "QSORT" 3 2003 "IEEE/The Open Group" "POSIX Programmer's Manual"
.\" qsort 
.SH NAME
qsort \- sort a table of data
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
void qsort(void *\fP\fIbase\fP\fB, size_t\fP \fInel\fP\fB, size_t\fP
\fIwidth\fP\fB,
.br
\ \ \ \ \ \  int (*\fP\fIcompar\fP\fB)(const void *, const void *));
.br
\fP
.SH DESCRIPTION
.LP
The \fIqsort\fP() function shall sort an array of \fInel\fP objects,
the initial element of which is pointed to by
\fIbase\fP. The size of each object, in bytes, is specified by the
\fIwidth\fP argument. If the \fInel\fP argument has the value
zero, the comparison function pointed to by \fIcompar\fP shall not
be called and no rearrangement shall take place.
.LP
The application shall ensure that the comparison function pointed
to by \fIcompar\fP does not alter the contents of the array.
The implementation may reorder elements of the array between calls
to the comparison function, but shall not alter the contents of
any individual element.
.LP
When the same objects (consisting of width bytes, irrespective of
their current positions in the array) are passed more than
once to the comparison function, the results shall be consistent with
one another. That is, they shall define a total ordering on
the array.
.LP
The contents of the array shall be sorted in ascending order according
to a comparison function. The \fIcompar\fP argument is a
pointer to the comparison function, which is called with two arguments
that point to the elements being compared. The application
shall ensure that the function returns an integer less than, equal
to, or greater than 0, if the first argument is considered
respectively less than, equal to, or greater than the second. If two
members compare as equal, their order in the sorted array is
unspecified.
.SH RETURN VALUE
.LP
The \fIqsort\fP() function shall not return a value.
.SH ERRORS
.LP
No errors are defined.
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
The comparison function need not compare every byte, so arbitrary
data may be contained in the elements in addition to the
values being compared.
.SH RATIONALE
.LP
The requirement that each argument (hereafter referred to as \fIp)\fP
to the comparison function is a pointer to elements of
the array implies that for every call, for each argument separately,
all of the following expressions are nonzero:
.sp
.RS
.nf

\fB((char *)p - (char *)base) % width == 0
(char *)p >= (char *)base
(char *)p < (char *)base + nel * width
\fP
.fi
.RE
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
The Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<stdlib.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
