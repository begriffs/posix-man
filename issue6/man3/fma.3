.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "FMA" 3 2003 "IEEE/The Open Group" "POSIX Programmer's Manual"
.\" fma 
.SH NAME
fma, fmaf, fmal \- floating-point multiply-add
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double fma(double\fP \fIx\fP\fB, double\fP \fIy\fP\fB, double\fP \fIz\fP\fB);
.br
float fmaf(float\fP \fIx\fP\fB, float\fP \fIy\fP\fB, float\fP \fIz\fP\fB);
.br
long double fmal(long double\fP \fIx\fP\fB, long double\fP \fIy\fP\fB,
long double\fP \fIz\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
These functions shall compute (\fIx\fP\ *\ \fIy\fP)\ +\ \fIz\fP, rounded
as one ternary operation: they shall
compute the value (as if) to infinite precision and round once to
the result format, according to the rounding mode characterized
by the value of FLT_ROUNDS.
.LP
An application wishing to check for error situations should set \fIerrno\fP
to zero and call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before calling these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, an error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return (\fIx\fP\ *\ \fIy\fP)\ +
\fIz\fP, rounded as one ternary
operation.
.LP
If
\fIx\fP or \fIy\fP are NaN, a NaN shall be returned.
.LP
If \fIx\fP multiplied by \fIy\fP is an exact infinity and \fIz\fP
is also an infinity but with the opposite sign, a domain
error shall occur, and either a NaN (if supported), or an implementation-defined
value shall be returned.
.LP
If one of \fIx\fP and \fIy\fP is infinite, the other is zero, and
\fIz\fP is not a NaN, a domain error shall occur, and
either a NaN (if supported), or an implementation-defined value shall
be returned.
.LP
If one of \fIx\fP and \fIy\fP is infinite, the other is zero, and
\fIz\fP is a NaN, a NaN shall be returned and a domain
error may occur.
.LP
If \fIx\fP* \fIy\fP is not 0*Inf nor Inf*0 and \fIz\fP is a NaN, a
NaN shall be returned. 
.SH ERRORS
.LP
These functions shall fail if:
.TP 7
Domain\ Error
The value of \fIx\fP* \fIy\fP+ \fIz\fP is invalid, or the value \fIx\fP*
\fIy\fP is invalid and \fIz\fP is not a NaN. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [EDOM]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the invalid floating-point exception shall be raised.
.TP 7
Range\ Error
The result overflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the overflow floating-point exception shall be raised.
.sp
.LP
These functions may fail if:
.TP 7
Domain\ Error
The value \fIx\fP* \fIy\fP is invalid and \fIz\fP is a NaN. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [EDOM]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the invalid floating-point exception shall be raised.
.TP 7
Range\ Error
The result underflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the underflow floating-point exception shall be
raised. 
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
In many cases, clever use of floating (\fIfused\fP) multiply-add leads
to much improved code; but its unexpected use by the
compiler can undermine carefully written code. The FP_CONTRACT macro
can be used to disallow use of floating multiply-add; and the
\fIfma\fP() function guarantees its use where desired. Many current
machines provide hardware floating multiply-add instructions;
software implementation can be used for others.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfeclearexcept\fP(), \fIfetestexcept\fP(), the Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.18, Treatment
of
Error Conditions for Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
